.. include:: /Includes.rst.txt

.. _performance-strategies:

============================
Optimization Strategies
============================

The extension provides three complementary optimization approaches that can be combined
to achieve up to 99.975% reduction in cache churn:

1. **Scoping Strategies** - Control which caches are invalidated
2. **Timing Strategies** - Control when transition checks occur
3. **Time Harmonization** - Group transitions to reduce cache churn

Scoping Strategies
==================

Control which pages are affected by temporal transitions.

Global Scoping (Default)
-------------------------

**Behavior**: Invalidates all page caches on transitions

**Characteristics**:

✅ Simple, zero configuration
✅ Works immediately after installation
✅ Suitable for small sites
❌ All pages expire together
❌ Reduced cache hit ratio

**Best For**: Small sites (<1,000 pages)

**Configuration**:

.. code-block:: php
   :caption: ext_localconf.php or config/system/additional.php

   $GLOBALS['TYPO3_CONF_VARS']['EXTENSIONS']['temporal_cache']['scoping'] = 'global';

Per-Page Scoping
----------------

**Behavior**: Invalidates only the affected page

**Characteristics**:

✅ **95%+ reduction** in cache invalidations
✅ Only pages with temporal content are affected
✅ Better cache hit ratio
⚠️ Requires page-level temporal tracking
⚠️ Slightly more complex configuration

**Best For**: Medium sites (1,000-10,000 pages)

**Configuration**:

.. code-block:: php
   :caption: ext_localconf.php or config/system/additional.php

   $GLOBALS['TYPO3_CONF_VARS']['EXTENSIONS']['temporal_cache']['scoping'] = 'per-page';

**How It Works**:

The extension tracks which pages contain temporal content and only invalidates those specific
page caches when transitions occur.

Per-Content Scoping
-------------------

**Behavior**: Finds all pages containing temporal content via refindex

**Characteristics**:

✅ **99.7% reduction** in cache invalidations
✅ Maximum precision - only affected pages
✅ Uses TYPO3 reference index
⚠️ Requires refindex to be up-to-date
⚠️ Additional refindex queries

**Best For**: Large sites (>10,000 pages)

**Configuration**:

.. code-block:: php
   :caption: ext_localconf.php or config/system/additional.php

   $GLOBALS['TYPO3_CONF_VARS']['EXTENSIONS']['temporal_cache']['scoping'] = 'per-content';

**How It Works**:

Uses TYPO3's reference index (sys_refindex) to find which pages reference temporal content
elements, then invalidates only those specific pages.

**Important**: Keep refindex updated:

.. code-block:: bash

   # Update reference index regularly
   php vendor/bin/typo3 referenceindex:update

Scoping Strategy Comparison
----------------------------

.. list-table::
   :header-rows: 1
   :widths: 20 20 20 20 20

   * - Strategy
     - Cache Invalidations
     - Setup Complexity
     - Requirements
     - Best Use Case
   * - **Global**
     - All pages
     - ✅ Simple
     - None
     - <1,000 pages
   * - **Per-Page**
     - Affected page only
     - ⚠️ Medium
     - Page tracking
     - 1,000-10,000 pages
   * - **Per-Content**
     - Affected pages only
     - ⚠️ Medium
     - Updated refindex
     - >10,000 pages

Timing Strategies
=================

Control when temporal transition checks occur.

Dynamic Timing (Default)
-------------------------

**Behavior**: Checks on every page cache generation

**Characteristics**:

✅ Immediate response to transitions
✅ Zero configuration
✅ Works out of the box
❌ 4 database queries per page cache generation (~5-20ms)
❌ Overhead on every cache miss

**Best For**: Sites prioritizing temporal accuracy

**Configuration**:

.. code-block:: php
   :caption: ext_localconf.php or config/system/additional.php

   $GLOBALS['TYPO3_CONF_VARS']['EXTENSIONS']['temporal_cache']['timing'] = 'dynamic';

**Query Performance**:

- Pages query: ~2-4ms
- Content query: ~3-6ms
- Calculation overhead: ~0.1ms
- **Total**: ~5-10ms per cache generation

Scheduler Timing
----------------

**Behavior**: Background processing via TYPO3 Scheduler

**Characteristics**:

✅ **Zero per-page overhead**
✅ No queries during page rendering
✅ Predictable resource usage
⚠️ Slight delay (typically 1 minute)
⚠️ Requires TYPO3 Scheduler configured

**Best For**: High-traffic sites

**Configuration**:

1. Enable scheduler timing:

.. code-block:: php
   :caption: ext_localconf.php or config/system/additional.php

   $GLOBALS['TYPO3_CONF_VARS']['EXTENSIONS']['temporal_cache']['timing'] = 'scheduler';

2. Add Scheduler task:

.. code-block:: bash

   # Via CLI
   php vendor/bin/typo3 scheduler:run temporal-cache:check-transitions

3. Configure cron:

.. code-block:: text
   :caption: Crontab

   * * * * * php /path/to/typo3/vendor/bin/typo3 scheduler:run temporal-cache:check-transitions

**Recommendation**: Run every 1 minute for best balance between accuracy and performance.

Hybrid Timing
-------------

**Behavior**: Mix strategies per content type

**Characteristics**:

✅ Optimizes for both accuracy and performance
✅ Flexible per-table configuration
⚠️ More complex setup
⚠️ Requires careful planning

**Best For**: Sites with mixed requirements

**Configuration**:

.. code-block:: php
   :caption: ext_localconf.php or config/system/additional.php

   // Dynamic for pages (immediate menu updates)
   $GLOBALS['TYPO3_CONF_VARS']['EXTENSIONS']['temporal_cache']['timing']['pages'] = 'dynamic';

   // Scheduler for content (acceptable delay)
   $GLOBALS['TYPO3_CONF_VARS']['EXTENSIONS']['temporal_cache']['timing']['tt_content'] = 'scheduler';

   // Dynamic for news (important deadlines)
   $GLOBALS['TYPO3_CONF_VARS']['EXTENSIONS']['temporal_cache']['timing']['tx_news_domain_model_news'] = 'dynamic';

Timing Strategy Comparison
---------------------------

.. list-table::
   :header-rows: 1
   :widths: 20 20 20 20 20

   * - Strategy
     - Per-Page Overhead
     - Response Time
     - Setup Complexity
     - Best Use Case
   * - **Dynamic**
     - ~5-10ms
     - Immediate
     - ✅ Simple
     - Accuracy priority
   * - **Scheduler**
     - 0ms
     - ~1 min delay
     - ⚠️ Medium
     - High traffic
   * - **Hybrid**
     - Mixed
     - Mixed
     - ⚠️ Complex
     - Mixed requirements

Time Harmonization
==================

Reduce cache churn by grouping temporal transitions to fixed time slots.

How It Works
------------

**Without Harmonization**:

::

   Scheduled content:
   - Article 1: starttime = 09:03:17
   - Article 2: starttime = 09:18:42
   - Article 3: starttime = 14:27:09
   - Article 4: starttime = 14:31:55

   Result: 4 separate cache invalidations throughout the day

**With Harmonization** (6-hour slots):

::

   Harmonized times:
   - Articles 1+2: Grouped to 09:00:00
   - Articles 3+4: Grouped to 12:00:00

   Result: 2 cache invalidations (at 09:00 and 12:00)
   Reduction: 50%

Real-World Impact
-----------------

**500 scheduled items/day** spread across the day:

**Without harmonization**: 500 cache invalidations/day

**With harmonization** (6-hour slots: 00:00, 06:00, 12:00, 18:00): 4 cache invalidations/day

**Reduction**: 99.2% (500 → 4)

Configuration
-------------

.. code-block:: php
   :caption: ext_localconf.php or config/system/additional.php

   // Enable time harmonization
   $GLOBALS['TYPO3_CONF_VARS']['EXTENSIONS']['temporal_cache']['harmonization']['enabled'] = true;

   // Time slots (seconds since midnight)
   $GLOBALS['TYPO3_CONF_VARS']['EXTENSIONS']['temporal_cache']['harmonization']['slots'] = [
       0,      // 00:00 (midnight)
       21600,  // 06:00
       43200,  // 12:00
       64800,  // 18:00
   ];

   // Tolerance (seconds) - don't shift if already close to slot
   $GLOBALS['TYPO3_CONF_VARS']['EXTENSIONS']['temporal_cache']['harmonization']['tolerance'] = 300; // 5 minutes

Tolerance Setting
-----------------

The tolerance prevents unwanted shifts for times already close to slots:

.. code-block:: text

   Slot at 12:00:00, tolerance = 300 seconds (5 minutes)

   Input time: 11:56:00 → Already within 5 min → NOT shifted → Stays 11:56:00
   Input time: 11:50:00 → Outside 5 min window → SHIFTED → Becomes 12:00:00
   Input time: 12:03:00 → Already within 5 min → NOT shifted → Stays 12:03:00

**Recommendation**: Set tolerance to 5-10 minutes (300-600 seconds) to prevent excessive shifting.

Best Practices
--------------

**DO:**

✅ Use 4-6 time slots per day (every 4-6 hours)
✅ Align slots with content publication schedules
✅ Set reasonable tolerance (5-10 minutes)
✅ Monitor actual transition times vs harmonized times

**DON'T:**

❌ Use too many slots (defeats the purpose)
❌ Set zero tolerance (shifts everything, even nearly-aligned times)
❌ Use harmonization for real-time content (news breaking, live events)
❌ Forget to communicate harmonization to editors

Combined Strategy Example
==========================

**Large News Site** (15,000 pages, 100 scheduled articles/day)

**Optimized Configuration**:

.. code-block:: php
   :caption: ext_localconf.php or config/system/additional.php

   // Scoping: Per-content (99.7% reduction in affected pages)
   $GLOBALS['TYPO3_CONF_VARS']['EXTENSIONS']['temporal_cache']['scoping'] = 'per-content';

   // Timing: Scheduler (zero per-page overhead)
   $GLOBALS['TYPO3_CONF_VARS']['EXTENSIONS']['temporal_cache']['timing'] = 'scheduler';

   // Harmonization: 4 daily slots (99.2% reduction in transitions)
   $GLOBALS['TYPO3_CONF_VARS']['EXTENSIONS']['temporal_cache']['harmonization'] = [
       'enabled' => true,
       'slots' => [0, 21600, 43200, 64800], // 00:00, 06:00, 12:00, 18:00
       'tolerance' => 300,
   ];

**Results**:

- Cache invalidations: 600/day → 12/day (99% reduction)
- Per-page overhead: 15ms → 0ms
- Cache hit ratio: 30% → 85%
- **Combined improvement**: 99.975% reduction in cache churn

See :ref:`configuration` for complete configuration reference.

Next Steps
==========

- :ref:`performance-limitations` - Understand Phase 1 constraints
- :ref:`decision-guide` - Site-specific recommendations
- :ref:`configuration` - Detailed configuration options
- :ref:`phases` - Future improvements roadmap
